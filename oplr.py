import tkinter as tk
import pickle
from tkinter import filedialog
from tkinter import font
import webbrowser

mydict={}
currentpub=0
filename=""
buttonpress=0

# this function opens a dialog box to select a pickle file to open
# that pickle file (currently generated by labtree_construct) is a dictionary with two main
# keys : "pubs" (which is a google scholar list of pubs objects) and "labels" which is the
# corresponding list of labels.
# labels[1] will include all the labels of pub #1 as keys, for example :
# labels[1] = {"labelled":True, "robotic":1, "architecture":1}
# labels["list"] includes the list of all existing labels in the file.
# labels["list"] = {"robotic":0, "architecture":0}
# the associated number will indicate (in the future) the number of time each label has been
# used
def openpickle():
    global mydict
    global filename
    global currentpub
    filename =  filedialog.askopenfilename(initialdir = "/",title = "Select file",filetypes = (("pickle files","*.pickle"),("all files","*.*")))
    # we only do something if a filename was selected 
    if filename != '':
        with open(filename, 'rb') as f:
        # The protocol version used is detected automatically, so we do not
        # have to specify it.
            mydict = pickle.load(f)
        # we check very quickly that the file has at least a "labels" key
        # it is not sufficient to be sure the format is OK but it is likely the
        # format is ok if "labels" is here, unless the pickle was constructed by
        # a totally new script
        if "labels" not in mydict:
            print("error: this pickle file doesn't have labels in structure")
        else:
            # we display a new pub
            nextpub()
            # we display the labels
            definelabels()
            # we add a new button to go to next pub
            nextbuttoncreate()

# this function create a new button "next pub" when a pickle file is opened
def nextbuttoncreate():
    global buttonpress
    if buttonpress == 0:
        btn_next = tk.Button(master=frm_abstract, text="Next Pub", width=8, height=1, command=nextbuttonpress)
        btn_next.pack(side=tk.TOP, padx=10, pady=30)
        buttonpress=1

# this function set the current pub as "labelled" and go to next pub
# but doesn't save ! only adding a new label actually saves
# this is to avoid the "oops double clicked on next !" problem
# (you can just close the app to reset)
def nextbuttonpress():
    global mydict
    global currentpub
    mydict["labels"][currentpub]["labelled"] = True
    nextpub()    

# this function displays a new publication
def nextpub():
    global mydict
    global currentpub
    # For every publication, we check :
    for pub in mydict['pubs']:
        # if no labels exist for this pub, we create the pub in labels
        if pub not in mydict["labels"]:
            mydict["labels"][pub] = {"labelled":False}
        # if the whole labels category doesn't have a list we create it
        if "list" not in mydict["labels"]:
            mydict["labels"]["list"] = {}
        # if the publication has never been labelled, we display it and we stop there
        if mydict["labels"][pub]["labelled"] == False:
            currentpub=pub
            lbl_abstract["text"] = mydict["pubs"][pub]['bib']['abstract']
            lbl_title["text"] = mydict["pubs"][pub]['bib']['title']
            lbl_link["text"] = mydict["pubs"][pub]['pub_url']
            # we bind a new callback for the url link of the pub
            lbl_link.bind("<Button-1>", lambda e: callback(mydict["pubs"][pub]['pub_url']))
            updatelabels()
            break

# this function open the "url" into the browser
def callback(url):
    webbrowser.open_new(url)

# this function updates the display of the labels of the publication
def updatelabels():
    global mydict
    global currentpub
    text=""
    for label in mydict['labels'][currentpub]:
        if label != "labelled":
            text = text+" ["+str(label)+"]"
    lbl_currentlabels["text"] = text

# this function add a label "id" to the current publication "currentpub"
# it also saves !
def addlabel(id):
    global mydict
    global currentpub
    mydict['labels'][currentpub][id] = 1
    updatelabels()
    savepickle()

# this function save the pickle 
def savepickle():
    global mydict
    global filename
    with open(filename, 'wb') as f:
        pickle.dump(mydict, f, pickle.HIGHEST_PROTOCOL)

# this function creates a whole new label, add it to the menu, and add it to the publication
def newlabel():
    global mydict
    global currentpub
    global filename
    if filename != "":
        toadd = ent_newlabel.get()
        if toadd not in mydict["labels"]["list"]:
            mydict["labels"]["list"][toadd]=0
            newbutton = tk.Button(master=frm_labels,
                             text=toadd,
                             command=lambda toadd=toadd: addlabel(toadd))
            newbutton.pack(side=tk.TOP)
        addlabel(toadd)
    else:
        print("Open a pickle first !")

# this function creates all the "labels" buttons for the first time when the pub is opened    
def definelabels():
    if "labels" in mydict:
        for label in mydict["labels"]["list"]:
            newbutton = tk.Button(master=frm_labels,
                                 text=label,
                                 command=lambda label=label: addlabel(label))
            newbutton.pack(side=tk.TOP, padx=3, pady=3)

#creation of the Tk window
window = tk.Tk()

# menu frame
frm_menu = tk.Frame(master=window, width=200)#, bg="red")
frm_menu.pack(fill=tk.X, side=tk.TOP, padx=20, pady=20)

# "open pickle" button of the menu frame
btn_open = tk.Button(master=frm_menu, text="Open Pickle", width=11, height=1, command=openpickle)
btn_open.pack(side=tk.LEFT)

# publication frame with the abstract etc.
frm_abstract = tk.Frame(master=window, width=800, height=800)#, bg="yellow")
frm_abstract.pack(fill=tk.BOTH, side=tk.LEFT, padx=20, pady=20, expand=True)
frm_abstract.pack_propagate(0) #this is to avoid being resized by content

# this is the title of the publications (default: "Instructions")
font1 = font.Font(window, ('Arial', 12, 'bold'))
lbl_title = tk.Message(master=frm_abstract, text="Instructions", width=800, font=font1, bg="#DDDDDD")
lbl_title.pack(side=tk.TOP, fill = tk.BOTH)

# this is the text of the abstract (default: explanations about the software)
lbl_abstract = tk.Message(master=frm_abstract, text="Click 'Open Pickle' to open the dictionary created by the labtree_construct script. You can then add new labels or existing ones dynamically for each publications. Your work is saved WHEN YOU ADD A LABEL. So if you click 'next pub' by mistake, just close the program and start it again. Written by Clara Lehenaff for research purpose, feel free to modify whatever needed. Any question ? clara.lehenaff@cri-paris.org", width=800, bg="#DDDDDD")
lbl_abstract.pack(side=tk.TOP, fill = tk.BOTH)

# this is the link to the publication (thus the abstract)
lbl_link = tk.Message(master=frm_abstract, text="", width=800, bg="#DDDDDD", fg='blue')
lbl_link.pack(side=tk.TOP, fill = tk.BOTH)

# this is the list of the labels associated with the publication
lbl_currentlabels = tk.Message(master=frm_abstract, text="", width=800, bg="#DDDDDD")
lbl_currentlabels.pack(side=tk.TOP, fill = tk.BOTH)

# this is the LABELS frame including all labels that can be added
frm_labels = tk.Frame(master=window, width=200,height=800)#, bg="blue")
frm_labels.pack(fill=tk.BOTH, side=tk.LEFT, padx=20, pady=20, expand=True)

# this is the "new label" text, entry box, and button to validate
lbl_newlabel = tk.Label(master=frm_labels,text="New Label :")
lbl_newlabel.pack(side=tk.TOP, fill = tk.BOTH)

ent_newlabel = tk.Entry(master=frm_labels)
ent_newlabel.pack(side=tk.TOP, fill = tk.BOTH)

btn_newlabel = tk.Button(master=frm_labels, text="Create", width=6, height=1, command=newlabel)
btn_newlabel.pack(side=tk.TOP, fill = tk.BOTH)

# this is a separator
lbl_separat = tk.Label(master=frm_labels,text="---")
lbl_separat.pack(side=tk.TOP, fill = tk.BOTH, padx=10, pady=10)

# title of the software
window.title("Open Paper Labelling for Research (OPLR 1.0)")

# main loop
window.mainloop()